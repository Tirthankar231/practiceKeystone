# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: String
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: StringNullableFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: String
  createdAt: DateTime
}

type Order {
  id: ID!
  orderId: String
  currency: String
  value: String
  bff: String
  collectedBy: String
  paymentType: String
  createdAt: DateTime
  state: String
  updatedAt: DateTime
  seller: Seller
  settlementDetails: Settlement_Details
  relatedLinks: JSON
}

input OrderWhereUniqueInput {
  id: ID
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
  orderId: StringFilter
  currency: StringFilter
  value: StringFilter
  bff: StringFilter
  collectedBy: StringFilter
  paymentType: StringFilter
  createdAt: DateTimeNullableFilter
  state: StringFilter
  updatedAt: DateTimeNullableFilter
  seller: SellerWhereInput
  settlementDetails: Settlement_DetailsWhereInput
}

input OrderOrderByInput {
  id: OrderDirection
  orderId: OrderDirection
  currency: OrderDirection
  value: OrderDirection
  bff: OrderDirection
  collectedBy: OrderDirection
  paymentType: OrderDirection
  createdAt: OrderDirection
  state: OrderDirection
  updatedAt: OrderDirection
}

input OrderUpdateInput {
  orderId: String
  currency: String
  value: String
  bff: String
  collectedBy: String
  paymentType: String
  createdAt: DateTime
  state: String
  updatedAt: DateTime
  seller: SellerRelateToOneForUpdateInput
  settlementDetails: Settlement_DetailsRelateToOneForUpdateInput
  relatedLinks: JSON
}

input SellerRelateToOneForUpdateInput {
  create: SellerCreateInput
  connect: SellerWhereUniqueInput
  disconnect: Boolean
}

input Settlement_DetailsRelateToOneForUpdateInput {
  create: Settlement_DetailsCreateInput
  connect: Settlement_DetailsWhereUniqueInput
  disconnect: Boolean
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  orderId: String
  currency: String
  value: String
  bff: String
  collectedBy: String
  paymentType: String
  createdAt: DateTime
  state: String
  updatedAt: DateTime
  seller: SellerRelateToOneForCreateInput
  settlementDetails: Settlement_DetailsRelateToOneForCreateInput
  relatedLinks: JSON
}

input SellerRelateToOneForCreateInput {
  create: SellerCreateInput
  connect: SellerWhereUniqueInput
}

input Settlement_DetailsRelateToOneForCreateInput {
  create: Settlement_DetailsCreateInput
  connect: Settlement_DetailsWhereUniqueInput
}

type Seller {
  id: ID!
  gst: String
  pan: String
  bpp_id: String
  name: String
  orders(where: OrderWhereInput! = {}, orderBy: [OrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderWhereUniqueInput): [Order!]
  ordersCount(where: OrderWhereInput! = {}): Int
}

input SellerWhereUniqueInput {
  id: ID
}

input SellerWhereInput {
  AND: [SellerWhereInput!]
  OR: [SellerWhereInput!]
  NOT: [SellerWhereInput!]
  id: IDFilter
  gst: StringFilter
  pan: StringFilter
  bpp_id: StringFilter
  name: StringFilter
  orders: OrderManyRelationFilter
}

input OrderManyRelationFilter {
  every: OrderWhereInput
  some: OrderWhereInput
  none: OrderWhereInput
}

input SellerOrderByInput {
  id: OrderDirection
  gst: OrderDirection
  pan: OrderDirection
  bpp_id: OrderDirection
  name: OrderDirection
}

input SellerUpdateInput {
  gst: String
  pan: String
  bpp_id: String
  name: String
  orders: OrderRelateToManyForUpdateInput
}

input OrderRelateToManyForUpdateInput {
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

input SellerUpdateArgs {
  where: SellerWhereUniqueInput!
  data: SellerUpdateInput!
}

input SellerCreateInput {
  gst: String
  pan: String
  bpp_id: String
  name: String
  orders: OrderRelateToManyForCreateInput
}

input OrderRelateToManyForCreateInput {
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

type Settlement_Details {
  id: ID!
  settlementType: String
  accountNo: String
  bankName: String
  branchName: String
  order: Order
}

input Settlement_DetailsWhereUniqueInput {
  id: ID
}

input Settlement_DetailsWhereInput {
  AND: [Settlement_DetailsWhereInput!]
  OR: [Settlement_DetailsWhereInput!]
  NOT: [Settlement_DetailsWhereInput!]
  id: IDFilter
  settlementType: StringFilter
  accountNo: StringFilter
  bankName: StringFilter
  branchName: StringFilter
  order: OrderWhereInput
}

input Settlement_DetailsOrderByInput {
  id: OrderDirection
  settlementType: OrderDirection
  accountNo: OrderDirection
  bankName: OrderDirection
  branchName: OrderDirection
}

input Settlement_DetailsUpdateInput {
  settlementType: String
  accountNo: String
  bankName: String
  branchName: String
  order: OrderRelateToOneForUpdateInput
}

input OrderRelateToOneForUpdateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
  disconnect: Boolean
}

input Settlement_DetailsUpdateArgs {
  where: Settlement_DetailsWhereUniqueInput!
  data: Settlement_DetailsUpdateInput!
}

input Settlement_DetailsCreateInput {
  settlementType: String
  accountNo: String
  bankName: String
  branchName: String
  order: OrderRelateToOneForCreateInput
}

input OrderRelateToOneForCreateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  createSeller(data: SellerCreateInput!): Seller
  createSellers(data: [SellerCreateInput!]!): [Seller]
  updateSeller(where: SellerWhereUniqueInput!, data: SellerUpdateInput!): Seller
  updateSellers(data: [SellerUpdateArgs!]!): [Seller]
  deleteSeller(where: SellerWhereUniqueInput!): Seller
  deleteSellers(where: [SellerWhereUniqueInput!]!): [Seller]
  createSettlement_Details(data: Settlement_DetailsCreateInput!): Settlement_Details
  createSettlementDetails(data: [Settlement_DetailsCreateInput!]!): [Settlement_Details]
  updateSettlement_Details(where: Settlement_DetailsWhereUniqueInput!, data: Settlement_DetailsUpdateInput!): Settlement_Details
  updateSettlementDetails(data: [Settlement_DetailsUpdateArgs!]!): [Settlement_Details]
  deleteSettlement_Details(where: Settlement_DetailsWhereUniqueInput!): Settlement_Details
  deleteSettlementDetails(where: [Settlement_DetailsWhereUniqueInput!]!): [Settlement_Details]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  role: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  orders(where: OrderWhereInput! = {}, orderBy: [OrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderWhereUniqueInput): [Order!]
  order(where: OrderWhereUniqueInput!): Order
  ordersCount(where: OrderWhereInput! = {}): Int
  sellers(where: SellerWhereInput! = {}, orderBy: [SellerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SellerWhereUniqueInput): [Seller!]
  seller(where: SellerWhereUniqueInput!): Seller
  sellersCount(where: SellerWhereInput! = {}): Int
  settlementDetails(where: Settlement_DetailsWhereInput! = {}, orderBy: [Settlement_DetailsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: Settlement_DetailsWhereUniqueInput): [Settlement_Details!]
  settlement_Details(where: Settlement_DetailsWhereUniqueInput!): Settlement_Details
  settlementDetailsCount(where: Settlement_DetailsWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
