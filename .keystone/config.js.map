{
  "version": 3,
  "sources": ["../keystone.ts", "../schema.ts", "../auth.ts"],
  "sourcesContent": ["// Welcome to Keystone!\n//\n// This file is what Keystone uses as the entry-point to your headless backend\n//\n// Keystone imports the default export of this file, expecting a Keystone configuration object\n//   you can find out more at https://keystonejs.com/docs/apis/config\n\nimport { config } from '@keystone-6/core';\n\n// to keep this file tidy, we define our schema in a different file\nimport { lists } from './schema';\nimport bodyParser from 'body-parser';\n\n\n// authentication is configured separately here too, but you might move this elsewhere\n// when you write your list-level access control functions, as they typically rely on session data\nimport { withAuth, session } from './auth';\n\nexport default withAuth(\n  config({\n    db: {\n      // we're using sqlite for the fastest startup experience\n      //   for more information on what database might be appropriate for you\n      //   see https://keystonejs.com/docs/guides/choosing-a-database#title\n      provider: 'postgresql',\n      url: 'postgres://postgres:Tirtha@4321@localhost:5432/keystone',\n      onConnect: async context => { /* ... */ },\n      // Optional advanced configuration\n      enableLogging: true,\n      idField: { kind: 'uuid' },\n      shadowDatabaseUrl: 'postgres://postgres:Tirtha@4321@localhost:5432/shadowdb'\n    },\n    server: {\n      extendExpressApp: (app, commonContext) => {\n        app.use(bodyParser.json());\n      \n        // Define your custom API endpoint for creating orders\n        app.post('/rest/orders', async (req, res) => {\n          try {\n            // Ensure the request has a valid context\n            const context = await commonContext.withRequest(req, res);\n      \n            // Extract order data from the request body\n            const { orderId, currency, value, bff, collectedBy, paymentType, state } = req.body;\n      \n            // Create the order using the extracted data\n            const order = await context.query.Order.createOne({\n              data: {\n                orderId,\n                currency,\n                value,\n                bff,\n                collectedBy,\n                paymentType,\n                state,\n              },\n            });\n      \n            // Return the created order as JSON response\n            res.json(order);\n          } catch (error) {\n            // Handle any errors that occur during the request\n            console.error('Error creating order:', error);\n            res.status(500).json({ error: 'Internal server error' });\n          }\n        });\n        // Define your custom API endpoint for fetching a specific order\n        app.get('/rest/orders/:orderId', async (req, res) => {\n          try {\n            // Ensure the request has a valid context\n            const context = await commonContext.withRequest(req, res);\n\n            // Extract the orderId from the request parameters\n            const { orderId } = req.params;\n\n            // Fetch the order using the orderId\n            const order = await context.query.Order.findOne({\n              where: { id: orderId },\n              // Include any additional fields you want to retrieve\n              // For example: select: 'orderId currency value paymentType state'\n            });\n\n            // Check if the order exists\n            if (!order) {\n              return res.status(404).json({ error: 'Order not found' });\n            }\n\n            // Return the order as JSON response\n            res.json(order);\n          } catch (error) {\n            // Handle any errors that occur during the request\n            console.error('Error fetching order:', error);\n            res.status(500).json({ error: 'Internal server error' });\n          }\n        });\n        // Define your custom API endpoint for fetching all orders\n        app.get('/rest/orders', async (req, res) => {\n          try {\n            // Ensure the request has a valid context\n            const context = await commonContext.withRequest(req, res);\n\n            // Fetch all orders including all fields\n            const orders = await context.query.Order.findMany({\n              query: 'orderId currency value bff collectedBy paymentType createdAt state updatedAt seller { name } settlementDetails { settlementType accountNo bankName branchName }',\n            });\n\n            // Check if any orders were found\n            if (!orders || orders.length === 0) {\n              return res.status(404).json({ error: 'No orders found' });\n            }\n\n            // Return the orders as JSON response\n            res.json(orders);\n          } catch (error) {\n            // Handle any errors that occur during the request\n            console.error('Error fetching orders:', error);\n            res.status(500).json({ error: 'Internal server error' });\n          }\n        });\n      },\n    },      \n    lists,\n    session,\n  })\n);\n", "// Welcome to your schema\n//   Schema driven development is Keystone's modus operandi\n//\n// This file is where we define the lists, fields and hooks for our data.\n// If you want to learn more about how lists are configured, please read\n// - https://keystonejs.com/docs/config/lists\n\nimport { list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\n\n// see https://keystonejs.com/docs/fields/overview for the full list of fields\n//   this is a few common fields for an example\nimport {\n  text,\n  relationship,\n  password,\n  timestamp,\n  select,\n  integer,\n  json,\n  virtual,\n  checkbox,\n} from '@keystone-6/core/fields';\n\n// the document field is a more complicated field, so it has it's own package\nimport { document } from '@keystone-6/fields-document';\n// if you want to make your own fields, see https://keystonejs.com/docs/guides/custom-fields\n\n// when using Typescript, you can refine your types to a stricter subset by importing\n// the generated types from '.keystone/types'\nimport type { Lists } from '.keystone/types';\n\nexport const lists: Lists = {\n  User: list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n    //     access: {\n    //   operation: {\n    //     query: ({ session }) => isNormalUser({ session }),\n    //     create: ({ session }) => isNormalUser({ session }),\n    //     update: ({ session }) => isNormalUser({ session }),\n    //     delete: ({ session }) => isAdmin({ session }),\n    //   },\n    // },\n    // this is the fields for our User list\n    fields: {\n      // by adding isRequired, we enforce that every User should have a name\n      //   if no name is provided, an error will be displayed\n      name: text({ validation: { isRequired: true } }),\n\n      email: text({\n        validation: { isRequired: true },\n        // by adding isIndexed: 'unique', we're saying that no user can have the same\n        // email as another user - this may or may not be a good idea for your project\n        isIndexed: 'unique',\n      }),\n\n      password: password({ validation: { isRequired: true } }),\n      role: select({\n        options: ['admin', 'user'], // Define enum options\n        defaultValue: 'user', // Set default value\n        ui: {\n          displayMode: 'segmented-control', // Display as segmented control in the UI\n        },\n      }),\n\n      createdAt: timestamp({\n        // this sets the timestamp to Date.now() when the user is first created\n        defaultValue: { kind: 'now' },\n      }),\n    },\n    ui: {\n      // Hide the delete action from the UI\n      hideDelete: true,\n    },\n  }),\n  Order: list({\n    access: allowAll,\n    // access: {\n    //   operation: {\n    //     query: ({ session }) => !!session, // All users can query\n    //     create: ({ session }) => session.data.role === 'admin', // Only admin can create\n    //     update: ({ session }) => session.data.role === 'admin', // Only admin can update\n    //     delete: ({ session }) => session.data.role === 'admin', \n    //   },\n    // },\n    fields: {\n      orderId: text({ validation: { isRequired: true } }),\n      currency: text({ validation: { isRequired: true } }),\n      value: text({ validation: { isRequired: true } }),\n      bff: text(),\n      collectedBy: text(),\n      paymentType: text({ validation: { isRequired: true } }),\n      createdAt: timestamp({ defaultValue: { kind: 'now' } }),\n      state: text({ validation: { isRequired: true } }),\n      updatedAt: timestamp({ defaultValue: { kind: 'now' } }),\n      // Establishing N:1 relationship with Seller\n      seller: relationship({ ref: 'Seller.orders', many: false }),\n      // Establishing 1:1 relationship with Settlement_Details\n      settlementDetails: relationship({ ref: 'Settlement_Details.order', many: false }),\n      relatedLinks: json({\n        ui: {\n          views: './components/component.tsx',\n          createView: { fieldMode: 'edit' },\n          listView: { fieldMode: 'hidden' },\n          itemView: { fieldMode: 'edit' },\n        },\n      }),\n    }\n  }),\n\n  Seller: list({\n    access: allowAll,\n    fields: {\n      gst: text(),\n      pan: text(),\n      bpp_id: text(),\n      name: text({ validation: { isRequired: true } }),\n      // Establishing 1:N relationship with Order\n      orders: relationship({ ref: 'Order.seller', many: true })\n    }\n  }),\n\n  Settlement_Details: list({\n    access: allowAll,\n    fields: {\n      settlementType: text({ validation: { isRequired: true } }),\n      accountNo: text(),\n      bankName: text(),\n      branchName: text(),\n      // Establishing 1:1 relationship with Order\n      order: relationship({ ref: 'Order.settlementDetails', many: false })\n    }\n  })\n};\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from '@keystone-6/core/session';\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n  //   this can be helpful for when you are writing your access control functions\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  sessionData: 'id name email role',\n  secretField: 'password',\n\n  // WARNING: remove initFirstItem functionality in production\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n  initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n    fields: ['name', 'email', 'password', 'role'],\n    itemData: { isAdmin: true },\n    \n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n  },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n"],
  "mappings": "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",
  "names": ["import_core", "bodyParser"]
}
